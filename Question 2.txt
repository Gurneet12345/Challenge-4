#include <unordered_map>
#include <list>

class LRUCache {
public:
    LRUCache(int capacity) : capacity(capacity) {}

    int get(int key) {
        auto it = cache.find(key);
        if (it == cache.end()) return -1;
        touch(it);
        return it->second.first;
    }

    void put(int key, int value) {
        auto it = cache.find(key);
        if (it != cache.end()) {
            touch(it);
        } else {
            if (cache.size() == capacity) {
                cache.erase(usage.back());
                usage.pop_back();
            }
            usage.push_front(key);
        }
        cache[key] = { value, usage.begin() };
    }

private:
    typedef std::list<int> LI;
    typedef std::pair<int, LI::iterator> PII;
    typedef std::unordered_map<int, PII> HIPII;

    HIPII cache;
    LI usage;
    int capacity;

    void touch(HIPII::iterator it) {
        int key = it->first;
        usage.erase(it->second.second);
        usage.push_front(key);
        it->second.second = usage.begin();
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
